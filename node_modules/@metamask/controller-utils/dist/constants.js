"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP = exports.ApprovalType = exports.ORIGIN_METAMASK = exports.OPENSEA_TEST_API_URL = exports.OPENSEA_API_URL = exports.OPENSEA_PROXY_URL = exports.BUILT_IN_NETWORKS = exports.TESTNET_TICKER_SYMBOLS = exports.ASSET_TYPES = exports.GWEI = exports.ERC1155_TOKEN_RECEIVER_INTERFACE_ID = exports.ERC1155_METADATA_URI_INTERFACE_ID = exports.ERC1155_INTERFACE_ID = exports.ERC721_ENUMERABLE_INTERFACE_ID = exports.ERC721_METADATA_INTERFACE_ID = exports.ERC721_INTERFACE_ID = exports.ERC20 = exports.ERC1155 = exports.ERC721 = exports.MAX_SAFE_CHAIN_ID = exports.GANACHE_CHAIN_ID = exports.IPFS_DEFAULT_GATEWAY_URL = exports.FALL_BACK_VS_CURRENCY = exports.RPC = void 0;
const types_1 = require("./types");
exports.RPC = 'rpc';
exports.FALL_BACK_VS_CURRENCY = 'ETH';
exports.IPFS_DEFAULT_GATEWAY_URL = 'https://cloudflare-ipfs.com/ipfs/';
// NETWORKS ID
exports.GANACHE_CHAIN_ID = '1337';
/**
 * The largest possible chain ID we can handle.
 * Explanation: https://gist.github.com/rekmarks/a47bd5f2525936c4b8eee31a16345553
 */
exports.MAX_SAFE_CHAIN_ID = 4503599627370476;
// TOKEN STANDARDS
exports.ERC721 = 'ERC721';
exports.ERC1155 = 'ERC1155';
exports.ERC20 = 'ERC20';
// TOKEN INTERFACE IDS
exports.ERC721_INTERFACE_ID = '0x80ac58cd';
exports.ERC721_METADATA_INTERFACE_ID = '0x5b5e139f';
exports.ERC721_ENUMERABLE_INTERFACE_ID = '0x780e9d63';
exports.ERC1155_INTERFACE_ID = '0xd9b67a26';
exports.ERC1155_METADATA_URI_INTERFACE_ID = '0x0e89341c';
exports.ERC1155_TOKEN_RECEIVER_INTERFACE_ID = '0x4e2312e0';
// UNITS
exports.GWEI = 'gwei';
// ASSET TYPES
exports.ASSET_TYPES = {
    NATIVE: 'NATIVE',
    TOKEN: 'TOKEN',
    NFT: 'NFT',
    UNKNOWN: 'UNKNOWN',
};
// TICKER SYMBOLS
exports.TESTNET_TICKER_SYMBOLS = {
    GOERLI: 'GoerliETH',
    SEPOLIA: 'SepoliaETH',
};
/**
 * Map of all build-in Infura networks to their network, ticker and chain IDs.
 */
exports.BUILT_IN_NETWORKS = {
    [types_1.NetworkType.goerli]: {
        chainId: types_1.NetworksChainId.goerli,
        ticker: types_1.NetworksTicker.goerli,
        rpcPrefs: {
            blockExplorerUrl: `https://${types_1.NetworkType.goerli}.etherscan.io`,
        },
    },
    [types_1.NetworkType.sepolia]: {
        chainId: types_1.NetworksChainId.sepolia,
        ticker: types_1.NetworksTicker.sepolia,
        rpcPrefs: {
            blockExplorerUrl: `https://${types_1.NetworkType.sepolia}.etherscan.io`,
        },
    },
    [types_1.NetworkType.mainnet]: {
        chainId: types_1.NetworksChainId.mainnet,
        ticker: types_1.NetworksTicker.mainnet,
        rpcPrefs: {
            blockExplorerUrl: 'https://etherscan.io',
        },
    },
    [types_1.NetworkType.localhost]: {
        chainId: types_1.NetworksChainId.localhost,
        blockExplorerUrl: undefined,
        rpcPrefs: undefined,
    },
    [types_1.NetworkType.rpc]: {
        chainId: undefined,
        blockExplorerUrl: undefined,
        rpcPrefs: undefined,
    },
};
// APIs
exports.OPENSEA_PROXY_URL = 'https://proxy.metafi.codefi.network/opensea/v1/api/v1';
exports.OPENSEA_API_URL = 'https://api.opensea.io/api/v1';
exports.OPENSEA_TEST_API_URL = 'https://testnets-api.opensea.io/api/v1';
// Default origin for controllers
exports.ORIGIN_METAMASK = 'metamask';
/**
 * Approval request types for various operations.
 * These types are used by different controllers to create and manage
 * approval requests consistently.
 */
var ApprovalType;
(function (ApprovalType) {
    ApprovalType["AddEthereumChain"] = "wallet_addEthereumChain";
    ApprovalType["EthDecrypt"] = "eth_decrypt";
    ApprovalType["EthGetEncryptionPublicKey"] = "eth_getEncryptionPublicKey";
    ApprovalType["EthSign"] = "eth_sign";
    ApprovalType["EthSignTypedData"] = "eth_signTypedData";
    ApprovalType["PersonalSign"] = "personal_sign";
    ApprovalType["SwitchEthereumChain"] = "wallet_switchEthereumChain";
    ApprovalType["Transaction"] = "transaction";
    ApprovalType["WalletRequestPermissions"] = "wallet_requestPermissions";
    ApprovalType["WatchAsset"] = "wallet_watchAsset";
    ApprovalType["SnapDialogAlert"] = "snap_dialog:alert";
    ApprovalType["SnapDialogConfirmation"] = "snap_dialog:confirmation";
    ApprovalType["SnapDialogPrompt"] = "snap_dialog:prompt";
    ApprovalType["Unlock"] = "unlock";
    ApprovalType["ConnectAccounts"] = "connect_accounts";
    ApprovalType["WalletConnect"] = "wallet_connect";
})(ApprovalType = exports.ApprovalType || (exports.ApprovalType = {}));
exports.NETWORK_ID_TO_ETHERS_NETWORK_NAME_MAP = {
    [types_1.NetworkId.goerli]: types_1.NetworkType.goerli,
    [types_1.NetworkId.sepolia]: types_1.NetworkType.sepolia,
    [types_1.NetworkId.mainnet]: types_1.NetworkType.mainnet,
};
//# sourceMappingURL=constants.js.map