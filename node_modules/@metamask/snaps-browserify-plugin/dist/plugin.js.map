{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../src/plugin.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA,uDAO+B;AAE/B,2DAAgD;AAChD,gDAA6B;AAC7B,mCAAsD;AAWtD;;;;;GAKG;AACH,KAAK,UAAU,UAAU,CAAC,OAAyB,EAAE,IAAY;IAC/D,IAAI,OAAO,CAAC,IAAI,EAAE;QAChB,MAAM,IAAA,8BAAgB,EAAC,iBAAiB,EAAE,IAAI,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAA,wBAAU,EAAC,IAAI,CAAC,CAAC,CAAC;KAC7E;IAED,IAAI,OAAO,CAAC,YAAY,EAAE;QACxB,MAAM,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,2BAAa,EAC9C,cAAS,CAAC,OAAO,CAAC,OAAO,CAAC,YAAY,CAAC,EACvC,OAAO,CAAC,aAAa,EACrB,IAAI,CACL,CAAC;QAEF,IAAI,CAAC,OAAO,CAAC,aAAa,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,EAAE;YAC/C,MAAM,IAAI,KAAK,CACb,6CAA6C,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,CACjE,CAAC;SACH;QAED,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YACvB,IAAA,wBAAU,EACR,6EAA6E,CAC9E,CAAC;YAEF,QAAQ,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,IAAA,wBAAU,EAAC,qBAAqB,OAAO,EAAE,CAAC,CAAC,CAAC;SAC3E;KACF;AACH,CAAC;AAED;;;GAGG;AACH,MAAa,wBAAyB,SAAQ,kBAAS;IAKrD;;;;;;;OAOG;IACH,YAAY,UAA4B,EAAE;QACxC,KAAK,EAAE,CAAC;QAbV,yCAA2B,EAAE,EAAC;QAE9B,oDAAoC;QAYlC,uBAAA,IAAI,qCAAY,EAAE,GAAG,OAAO,EAAE,MAAA,CAAC;IACjC,CAAC;IAED;;;;;;;OAOG;IACH,UAAU,CACR,KAAa,EACb,SAAyB,EACzB,QAA2B;QAE3B,yCAAyC;QACzC,uBAAA,IAAI,sCAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACvB,QAAQ,EAAE,CAAC;IACb,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,QAA2B;QAChC,+DAA+D;QAC/D,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,uBAAA,IAAI,sCAAM,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;QAEzD,yEAAyE;QACzE,2BAA2B;QAC3B,MAAM,cAAc,GAAG,IAAA,+BAAU,EAAC,IAAI,CAAC,EAAE,QAAQ,EAAE,IAAI,SAAS,CAAC;QAEjE,MAAM,MAAM,GAAG,IAAA,+BAAiB,EAAC,IAAI,EAAE;YACrC,GAAG,uBAAA,IAAI,yCAAS;YAChB,SAAS,EAAE,OAAO,CAAC,cAAc,CAAC,IAAI,QAAQ;YAC9C,cAAc;SACf,CAAC,CAAC;QAEH,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;YAC9B,IAAA,wBAAU,EACR,2EAA2E,MAAM,CAAC,QAAQ,CAAC,IAAI,CAC7F,IAAI,CACL,EAAE,CACJ,CAAC;SACH;QAED,UAAU,CAAC,uBAAA,IAAI,yCAAS,EAAE,MAAM,CAAC,IAAI,CAAC;aACnC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,QAAQ,CAAC,KAAK,CAAC,CAAC;QAClB,CAAC,CAAC;aACD,OAAO,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;YACvB,QAAQ,EAAE,CAAC;QACb,CAAC,CAAC,CAAC;IACP,CAAC;CACF;AAzED,4DAyEC;;AAED;;;;;;;;;;;;;;GAcG;AACH,SAAwB,MAAM,CAC5B,kBAAoC,EACpC,OAA0B;IAE1B,MAAM,cAAc,GAAG;QACrB,IAAI,EAAE,IAAI;QACV,YAAY,EAAE,cAAS,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,oBAAoB,CAAC;QACjE,aAAa,EAAE,IAAI;QACnB,GAAG,OAAO;KACX,CAAC;IAEF,wEAAwE;IACxE,0DAA0D;IAC1D,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAC9B,IAAI,wBAAwB,CAAC,cAAc,CAAC,CAC7C,CAAC;AACJ,CAAC;AAhBD,yBAgBC","sourcesContent":["import {\n  checkManifest,\n  evalBundle,\n  logWarning,\n  postProcessBundle,\n  PostProcessOptions,\n  useTemporaryFile,\n} from '@metamask/snaps-utils';\nimport { BrowserifyObject } from 'browserify';\nimport { fromSource } from 'convert-source-map';\nimport pathUtils from 'path';\nimport { Transform, TransformCallback } from 'stream';\n\ntype PluginOptions = {\n  eval?: boolean;\n  manifestPath?: string;\n  writeManifest?: boolean;\n};\n\nexport type Options = PluginOptions &\n  Omit<PostProcessOptions, 'sourceMap' | 'inputSourceMap'>;\n\n/**\n * Run eval on the processed bundle and fix the manifest, if configured.\n *\n * @param options - The plugin options.\n * @param code - The code to eval, if the eval option is enabled.\n */\nasync function postBundle(options: Partial<Options>, code: string) {\n  if (options.eval) {\n    await useTemporaryFile('snaps-bundle.js', code, (path) => evalBundle(path));\n  }\n\n  if (options.manifestPath) {\n    const { errors, warnings } = await checkManifest(\n      pathUtils.dirname(options.manifestPath),\n      options.writeManifest,\n      code,\n    );\n\n    if (!options.writeManifest && errors.length > 0) {\n      throw new Error(\n        `Manifest Error: The manifest is invalid.\\n${errors.join('\\n')}`,\n      );\n    }\n\n    if (warnings.length > 0) {\n      logWarning(\n        'Manifest Warning: Validation of snap.manifest.json completed with warnings.',\n      );\n\n      warnings.forEach((warning) => logWarning(`Manifest Warning: ${warning}`));\n    }\n  }\n}\n\n/**\n * A transform stream which can be used in the Browserify pipeline. It accepts a\n * string input, which is post-processed and pushed to the output stream.\n */\nexport class SnapsBrowserifyTransform extends Transform {\n  readonly #data: Buffer[] = [];\n\n  readonly #options: Partial<Options>;\n\n  /**\n   * Construct an instance of the transform stream.\n   *\n   * @param options - The post-processing options.\n   * @param options.stripComments - Whether to strip comments. Defaults to `true`.\n   * @param options.transformHtmlComments - Whether to transform HTML comments.\n   * Defaults to `true`.\n   */\n  constructor(options: Partial<Options> = {}) {\n    super();\n    this.#options = { ...options };\n  }\n\n  /**\n   * Takes a chunk of data and pushes it into an internal array, for later\n   * processing.\n   *\n   * @param chunk - The chunk of data to transform.\n   * @param _encoding - The encoding of the chunk.\n   * @param callback - The callback to call when the chunk is processed.\n   */\n  _transform(\n    chunk: Buffer,\n    _encoding: BufferEncoding,\n    callback: TransformCallback,\n  ) {\n    // Collects all the chunks into an array.\n    this.#data.push(chunk);\n    callback();\n  }\n\n  /**\n   * Takes the internal array of chunks and processes them. The processed code\n   * is pushed to the output stream.\n   *\n   * @param callback - The callback to call when the stream is finished.\n   */\n  _flush(callback: TransformCallback) {\n    // Merges all the chunks into a single string and processes it.\n    const code = Buffer.concat(this.#data).toString('utf-8');\n\n    // Browserify uses inline source maps, so we attempt to read it here, and\n    // convert it to an object.\n    const inputSourceMap = fromSource(code)?.toObject() ?? undefined;\n\n    const result = postProcessBundle(code, {\n      ...this.#options,\n      sourceMap: Boolean(inputSourceMap) && 'inline',\n      inputSourceMap,\n    });\n\n    if (result.warnings.length > 0) {\n      logWarning(\n        `Bundle Warning: Processing of the Snap bundle completed with warnings.\\n${result.warnings.join(\n          '\\n',\n        )}`,\n      );\n    }\n\n    postBundle(this.#options, result.code)\n      .catch((error) => {\n        callback(error);\n      })\n      .finally(() => {\n        this.push(result.code);\n        callback();\n      });\n  }\n}\n\n/**\n * The Browserify plugin function. Can be passed to the Browserify `plugin`\n * function, or used by simply passing the package name to `plugin`.\n *\n * @param browserifyInstance - The Browserify instance.\n * @param options - The plugin options.\n * @param options.stripComments - Whether to strip comments. Defaults to `true`.\n * @param options.eval - Whether to evaluate the bundle to test SES\n * compatibility. Defaults to `true`.\n * @param options.manifestPath - The path to the manifest file. If provided,\n * the manifest will be validated. Defaults to\n * `process.cwd() + '/snap.manifest.json'`.\n * @param options.writeManifest - Whether to fix the manifest.\n * Defaults to `true`.\n */\nexport default function plugin(\n  browserifyInstance: BrowserifyObject,\n  options?: Partial<Options>,\n): void {\n  const defaultOptions = {\n    eval: true,\n    manifestPath: pathUtils.join(process.cwd(), 'snap.manifest.json'),\n    writeManifest: true,\n    ...options,\n  };\n\n  // Pushes the transform stream at the end of Browserify's pipeline. This\n  // ensures that the transform is run on the entire bundle.\n  browserifyInstance.pipeline.push(\n    new SnapsBrowserifyTransform(defaultOptions),\n  );\n}\n"]}