{"version":3,"file":"evalHandler.js","sourceRoot":"","sources":["../../../src/cmds/eval/evalHandler.ts"],"names":[],"mappings":";;;AAAA,uDAA4D;AAC5D,2CAAyC;AAIzC;;;;;;GAMG;AACI,KAAK,UAAU,WAAW,CAAC,IAAe;IAC/C,MAAM,EAAE,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC;IAEpC,IAAA,cAAM,EAAC,OAAO,UAAU,KAAK,QAAQ,CAAC,CAAC;IAEvC,IAAI;QACF,MAAM,IAAA,wBAAU,EAAC,UAAU,CAAC,CAAC;QAC7B,IAAA,qBAAO,EAAC,4BAA4B,UAAU,WAAW,CAAC,CAAC;KAC5D;IAAC,OAAO,KAAK,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,0BAA0B,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;KAC5D;AACH,CAAC;AAXD,kCAWC","sourcesContent":["import { evalBundle, logInfo } from '@metamask/snaps-utils';\nimport { assert } from '@metamask/utils';\n\nimport { YargsArgs } from '../../types/yargs';\n\n/**\n * Runs the snap in a worker, to ensure SES compatibility.\n *\n * @param argv - The Yargs arguments object.\n * @returns A promise that resolves once the eval has finished.\n * @throws If the eval failed.\n */\nexport async function evalHandler(argv: YargsArgs): Promise<void> {\n  const { bundle: bundlePath } = argv;\n\n  assert(typeof bundlePath === 'string');\n\n  try {\n    await evalBundle(bundlePath);\n    logInfo(`Eval Success: evaluated '${bundlePath}' in SES!`);\n  } catch (error) {\n    throw new Error(`Snap evaluation error: ${error.message}`);\n  }\n}\n"]}