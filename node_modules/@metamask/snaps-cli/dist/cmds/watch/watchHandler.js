"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.watch = void 0;
const snaps_utils_1 = require("@metamask/snaps-utils");
const chokidar_1 = __importDefault(require("chokidar"));
const utils_1 = require("../../utils");
const bundle_1 = require("../build/bundle");
const evalHandler_1 = require("../eval/evalHandler");
const manifestHandler_1 = require("../manifest/manifestHandler");
const serveHandler_1 = require("../serve/serveHandler");
/**
 * Watch a directory and its subdirectories for changes, and build when files
 * are added or changed.
 *
 * Ignores 'node_modules' and dotfiles.
 * Creates destination directory if it doesn't exist.
 *
 * @param argv - Arguments as an object generated by Yargs.
 * @param argv.src - The source file path.
 * @param argv.dist - The output directory path.
 * @param argv.'outfileName' - The output file name.
 */
async function watch(argv) {
    const { dist, eval: shouldEval, manifest, outfileName, src, serve: shouldServe, } = argv;
    if (outfileName) {
        (0, snaps_utils_1.validateOutfileName)(outfileName);
    }
    await (0, snaps_utils_1.validateFilePath)(src);
    await (0, snaps_utils_1.validateDirPath)(dist, true);
    const rootDir = src.includes('/')
        ? src.substring(0, src.lastIndexOf('/') + 1)
        : '.';
    const outfilePath = (0, snaps_utils_1.getOutfilePath)(dist, outfileName);
    const buildSnap = async (path, logMessage) => {
        if (logMessage !== undefined) {
            (0, snaps_utils_1.logInfo)(logMessage);
        }
        try {
            await (0, bundle_1.bundle)(src, outfilePath, argv, (0, utils_1.loadConfig)().bundlerCustomizer);
            if (manifest) {
                await (0, manifestHandler_1.manifestHandler)(argv);
            }
            if (shouldEval) {
                await (0, evalHandler_1.evalHandler)({ ...argv, bundle: outfilePath });
            }
        }
        catch (error) {
            (0, snaps_utils_1.logError)(`Error ${path === undefined
                ? 'during initial build'
                : `while processing "${path}"`}.`, error);
        }
    };
    chokidar_1.default
        .watch(rootDir, {
        ignoreInitial: true,
        ignored: [
            '**/node_modules/**',
            `**/${dist}/**`,
            `**/test/**`,
            `**/tests/**`,
            `**/*.test.js`,
            `**/*.test.ts`,
            /* istanbul ignore next */
            (str) => str !== '.' && str.startsWith('.'),
        ],
    })
        .on('ready', () => {
        buildSnap()
            .then(() => {
            if (shouldServe) {
                return (0, serveHandler_1.serve)(argv);
            }
            return undefined;
        })
            .catch((error) => {
            (0, snaps_utils_1.logError)('Error during initial build.', error);
        });
    })
        .on('add', (path) => {
        buildSnap(path, `File added: ${path}`).catch((error) => {
            (0, snaps_utils_1.logError)(`Error while processing "${path}".`, error);
        });
    })
        .on('change', (path) => {
        buildSnap(path, `File changed: ${path}`).catch((error) => {
            (0, snaps_utils_1.logError)(`Error while processing "${path}".`, error);
        });
    })
        .on('unlink', (path) => (0, snaps_utils_1.logInfo)(`File removed: ${path}`))
        .on('error', (error) => {
        (0, snaps_utils_1.logError)(`Watcher error: ${error.message}`, error);
    })
        .add(rootDir);
    (0, snaps_utils_1.logInfo)(`Watching '${rootDir}' for changes...`);
}
exports.watch = watch;
//# sourceMappingURL=watchHandler.js.map