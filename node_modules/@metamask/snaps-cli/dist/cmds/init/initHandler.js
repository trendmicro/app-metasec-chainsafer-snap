"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initHandler = void 0;
const snaps_utils_1 = require("@metamask/snaps-utils");
const utils_1 = require("@metamask/utils");
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const initUtils_1 = require("./initUtils");
const SATISFIED_VERSION = '>=16';
/**
 * Creates a new snap package, based on one of the provided templates. This
 * creates all the necessary files, like `package.json`, `snap.config.js`, etc.
 * to start developing a snap.
 *
 * @param argv - The Yargs arguments object.
 * @returns The Yargs arguments augmented with the new `dist`, `outfileName` and
 * `src` properties.
 * @throws If initialization of the snap package failed.
 */
async function initHandler(argv) {
    const { directory } = argv;
    const isVersionSupported = (0, utils_1.satisfiesVersionRange)(process.version, SATISFIED_VERSION);
    if (!isVersionSupported) {
        throw new Error(`Init Error: You are using an outdated version of Node (${process.version}). Please update to Node ${SATISFIED_VERSION}.`);
    }
    const gitExists = (0, initUtils_1.isGitInstalled)();
    if (!gitExists) {
        throw new Error(`Init Error: git is not installed. Please install git to continue.`);
    }
    const directoryToUse = directory
        ? path_1.default.join(process.cwd(), directory)
        : process.cwd();
    (0, snaps_utils_1.logInfo)(`Preparing ${directoryToUse}...`);
    await (0, initUtils_1.prepareWorkingDirectory)(directoryToUse);
    try {
        (0, snaps_utils_1.logInfo)(`Cloning template...`);
        (0, initUtils_1.cloneTemplate)(directoryToUse);
        await fs_1.promises.rm(path_1.default.join(directoryToUse, '.git'), {
            force: true,
            recursive: true,
        });
    }
    catch (error) {
        throw new Error('Init Error: Failed to create template.');
    }
    (0, snaps_utils_1.logInfo)('Installing dependencies...');
    (0, initUtils_1.yarnInstall)(directoryToUse);
    if (!(0, initUtils_1.isInGitRepository)(directoryToUse)) {
        (0, snaps_utils_1.logInfo)('Initializing git repository...');
        (0, initUtils_1.gitInit)(directoryToUse);
    }
    const snapLocation = path_1.default.join(directoryToUse, initUtils_1.SNAP_LOCATION);
    const manifest = (await (0, snaps_utils_1.readJsonFile)(path_1.default.join(snapLocation, snaps_utils_1.NpmSnapFileNames.Manifest))).result;
    const validatedManifest = (0, snaps_utils_1.createSnapManifest)(manifest);
    const packageJson = (await (0, snaps_utils_1.readJsonFile)(path_1.default.join(snapLocation, snaps_utils_1.NpmSnapFileNames.PackageJson))).result;
    const distPath = validatedManifest.source.location.npm.filePath.split('/');
    return {
        ...argv,
        dist: distPath[0],
        outfileName: distPath[1],
        src: packageJson.main || 'src/index.js',
        snapLocation,
    };
}
exports.initHandler = initHandler;
//# sourceMappingURL=initHandler.js.map